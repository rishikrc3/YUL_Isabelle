theory BasicSyntax
  imports Main
begin

type_synonym var_name = string
type_synonym val_name = nat
type_synonym state = "var_name \<Rightarrow> val_name option"

definition empty_state :: state where  "empty_state = (\<lambda>_. None)"  

definition add_variable :: "state \<Rightarrow> var_name \<Rightarrow> val_name \<Rightarrow> state" where
  "add_variable old_state var_name new_value = old_state(var_name := Some new_value)"

(*Unit Tests *)

lemma "empty_state ''x'' = None"
  by (simp add: empty_state_def)


lemma "add_variable empty_state ''x'' 5 ''x'' = Some 5"
  by (simp add: add_variable_def empty_state_def)


lemma "add_variable empty_state ''x'' 5 ''y'' = None"  
  by (simp add: add_variable_def empty_state_def)

end
